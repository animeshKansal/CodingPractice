/*A very popular game played on the price is right is Plinko!! This is a game that involves a disk falling down a peg board, 
bouncing back and forth until it reaches a bucket at the bottom that can range from  0to0to 10,000. In our Plinko board we 
will have 7 lanes (or columns) with 6 sets of pegs or rows (not including the final bucket for the final position of the disk).
At the bottom of the board the bucket values are as follows, 250,500,0,2000,0,500,250.

Write a program that simulates dropping 4 disks from the top, the starting position should always be random (given 7 
unique starting positions).*/

/* This function will return the current position of the ball wrt to the price money array at the bottom. I have made the 
function to recursively call itself,until the ball reaches peg = 6 . I have put a constraint that ball can only jump 1 position
left or write from current position and used random.randint function for that. If the current position of the ball is at either
sides of the table, then the function will return the value towards inside of the table , so that it wonâ€™t create an array out
of index exception. */

def bounceBackForth(currentPos,pegs):
    if(pegs==6):
        return currentPos
    pegs+=1
    if(currentPos==0):
        return bounceBackForth(currentPos+random.randint(0,1),pegs)
    elif(currentPos==6):
        return bounceBackForth(currentPos+random.randint(-1,0),pegs)
    else:
        return bounceBackForth(currentPos+random.randint(-1,1),pegs)

import random

disks = range(1,5)
priceAmount = [250,500,0,2000,0,500,250]
for disk in disks:
    initPos = random.randint(0,6)
    finalPos = bounceBackForth(initPos,0)
    print("price won this time = {}".format(priceAmount[finalPos]))

